/* tslint:disable */
/* eslint-disable */
/**
 * ranklab-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import type {
  AccountLink,
  Avatar,
  BillingDetails,
  BillingPortalLink,
  Coach,
  CoachUpdateReviewRequest,
  Comment,
  CreateAccountLinkRequest,
  CreateBillingPortalSession,
  CreateCoachRequest,
  CreateCommentRequest,
  CreateGameRequest,
  CreateLoginLink,
  CreatePlayerRequest,
  CreateRecordingRequest,
  CreateReviewRequest,
  CreateSessionRequest,
  CreateSessionResponse,
  Game,
  LoginLink,
  OneTimeTokenParams,
  PaginatedResultForReview,
  PaymentMethod,
  Player,
  PlayerUpdateReviewRequest,
  Recording,
  ResetPasswordRequest,
  Review,
  StatusResponse,
  UpdateCoachRequest,
  UpdateCommentRequest,
  UpdatePasswordRequest,
  UpdatePlayerRequest,
} from "../models"

export interface CoachAccountCreateRequest {
  createCoachRequest: CreateCoachRequest
}

export interface CoachAccountUpdateRequest {
  updateCoachRequest: UpdateCoachRequest
}

export interface CoachAvatarsCreateRequest {
  body: object
}

export interface CoachCommentsCreateRequest {
  createCommentRequest: CreateCommentRequest
}

export interface CoachCommentsDeleteRequest {
  id: string
}

export interface CoachCommentsListRequest {
  reviewId: string
}

export interface CoachCommentsUpdateRequest {
  id: string
  updateCommentRequest: UpdateCommentRequest
}

export interface CoachReviewsGetRequest {
  id: string
}

export interface CoachReviewsListRequest {
  page?: number | null
  archived?: boolean | null
}

export interface CoachReviewsUpdateRequest {
  id: string
  coachUpdateReviewRequest: CoachUpdateReviewRequest
}

export interface CoachStripeAccountLinksCreateRequest {
  createAccountLinkRequest: CreateAccountLinkRequest
}

export interface CoachStripeLoginLinksCreateRequest {
  createLoginLink: CreateLoginLink
}

export interface PlayerAccountCreateRequest {
  createPlayerRequest: CreatePlayerRequest
}

export interface PlayerAccountUpdateRequest {
  updatePlayerRequest: UpdatePlayerRequest
}

export interface PlayerCoachesGetRequest {
  slug: string
}

export interface PlayerCommentsListRequest {
  reviewId: string
}

export interface PlayerGamesCreateRequest {
  createGameRequest: CreateGameRequest
}

export interface PlayerRecordingsCreateRequest {
  createRecordingRequest: CreateRecordingRequest
}

export interface PlayerRecordingsGetRequest {
  id: string
}

export interface PlayerReviewsCreateRequest {
  createReviewRequest: CreateReviewRequest
}

export interface PlayerReviewsDeleteRequest {
  id: string
}

export interface PlayerReviewsGetRequest {
  id: string
}

export interface PlayerReviewsListRequest {
  page?: number | null
  archived?: boolean | null
}

export interface PlayerReviewsUpdateRequest {
  id: string
  playerUpdateReviewRequest: PlayerUpdateReviewRequest
}

export interface PlayerStripeBillingDetailsUpdateRequest {
  billingDetails: BillingDetails
}

export interface PlayerStripeBillingPortalSessionsCreateRequest {
  createBillingPortalSession: CreateBillingPortalSession
}

export interface SessionCreateRequest {
  createSessionRequest: CreateSessionRequest
}

export interface SessionResetPasswordRequest {
  resetPasswordRequest: ResetPasswordRequest
}

export interface SessionUpdatePasswordRequest {
  auth: OneTimeTokenParams
  updatePasswordRequest: UpdatePasswordRequest
}

/**
 *
 */
export class RanklabApi extends runtime.BaseAPI {
  /**
   */
  async coachAccountCreateRaw(
    requestParameters: CoachAccountCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CreateSessionResponse>> {
    if (
      requestParameters.createCoachRequest === null ||
      requestParameters.createCoachRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createCoachRequest",
        "Required parameter requestParameters.createCoachRequest was null or undefined when calling coachAccountCreate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/coach/account`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createCoachRequest,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async coachAccountCreate(
    requestParameters: CoachAccountCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CreateSessionResponse> {
    const response = await this.coachAccountCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async coachAccountGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Coach>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/coach/account`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async coachAccountGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Coach> {
    const response = await this.coachAccountGetRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async coachAccountUpdateRaw(
    requestParameters: CoachAccountUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Coach>> {
    if (
      requestParameters.updateCoachRequest === null ||
      requestParameters.updateCoachRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "updateCoachRequest",
        "Required parameter requestParameters.updateCoachRequest was null or undefined when calling coachAccountUpdate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/coach/account`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.updateCoachRequest,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async coachAccountUpdate(
    requestParameters: CoachAccountUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Coach> {
    const response = await this.coachAccountUpdateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async coachAvatarsCreateRaw(
    requestParameters: CoachAvatarsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Avatar>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling coachAvatarsCreate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/coach/avatars`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async coachAvatarsCreate(
    requestParameters: CoachAvatarsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Avatar> {
    const response = await this.coachAvatarsCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async coachAvatarsDeleteRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/coach/avatars`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async coachAvatarsDelete(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<StatusResponse> {
    const response = await this.coachAvatarsDeleteRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async coachCommentsCreateRaw(
    requestParameters: CoachCommentsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Comment>> {
    if (
      requestParameters.createCommentRequest === null ||
      requestParameters.createCommentRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createCommentRequest",
        "Required parameter requestParameters.createCommentRequest was null or undefined when calling coachCommentsCreate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/coach/comments`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createCommentRequest,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async coachCommentsCreate(
    requestParameters: CoachCommentsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Comment> {
    const response = await this.coachCommentsCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async coachCommentsDeleteRaw(
    requestParameters: CoachCommentsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling coachCommentsDelete."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/coach/comments/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async coachCommentsDelete(
    requestParameters: CoachCommentsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<StatusResponse> {
    const response = await this.coachCommentsDeleteRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async coachCommentsListRaw(
    requestParameters: CoachCommentsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Comment>>> {
    if (
      requestParameters.reviewId === null ||
      requestParameters.reviewId === undefined
    ) {
      throw new runtime.RequiredError(
        "reviewId",
        "Required parameter requestParameters.reviewId was null or undefined when calling coachCommentsList."
      )
    }

    const queryParameters: any = {}

    if (requestParameters.reviewId !== undefined) {
      queryParameters["review_id"] = requestParameters.reviewId
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/coach/comments`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async coachCommentsList(
    requestParameters: CoachCommentsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Comment>> {
    const response = await this.coachCommentsListRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async coachCommentsUpdateRaw(
    requestParameters: CoachCommentsUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Comment>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling coachCommentsUpdate."
      )
    }

    if (
      requestParameters.updateCommentRequest === null ||
      requestParameters.updateCommentRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "updateCommentRequest",
        "Required parameter requestParameters.updateCommentRequest was null or undefined when calling coachCommentsUpdate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/coach/comments/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.updateCommentRequest,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async coachCommentsUpdate(
    requestParameters: CoachCommentsUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Comment> {
    const response = await this.coachCommentsUpdateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async coachGamesListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Game>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/coach/games`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async coachGamesList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Game>> {
    const response = await this.coachGamesListRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async coachReviewsGetRaw(
    requestParameters: CoachReviewsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Review>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling coachReviewsGet."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/coach/reviews/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async coachReviewsGet(
    requestParameters: CoachReviewsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Review> {
    const response = await this.coachReviewsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async coachReviewsListRaw(
    requestParameters: CoachReviewsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginatedResultForReview>> {
    const queryParameters: any = {}

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page
    }

    if (requestParameters.archived !== undefined) {
      queryParameters["archived"] = requestParameters.archived
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/coach/reviews`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async coachReviewsList(
    requestParameters: CoachReviewsListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginatedResultForReview> {
    const response = await this.coachReviewsListRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async coachReviewsUpdateRaw(
    requestParameters: CoachReviewsUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Review>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling coachReviewsUpdate."
      )
    }

    if (
      requestParameters.coachUpdateReviewRequest === null ||
      requestParameters.coachUpdateReviewRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "coachUpdateReviewRequest",
        "Required parameter requestParameters.coachUpdateReviewRequest was null or undefined when calling coachReviewsUpdate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/coach/reviews/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.coachUpdateReviewRequest,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async coachReviewsUpdate(
    requestParameters: CoachReviewsUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Review> {
    const response = await this.coachReviewsUpdateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async coachStripeAccountLinksCreateRaw(
    requestParameters: CoachStripeAccountLinksCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AccountLink>> {
    if (
      requestParameters.createAccountLinkRequest === null ||
      requestParameters.createAccountLinkRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createAccountLinkRequest",
        "Required parameter requestParameters.createAccountLinkRequest was null or undefined when calling coachStripeAccountLinksCreate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/coach/stripe-account-links`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createAccountLinkRequest,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async coachStripeAccountLinksCreate(
    requestParameters: CoachStripeAccountLinksCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AccountLink> {
    const response = await this.coachStripeAccountLinksCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async coachStripeCountrySpecsListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/coach/stripe-country-specs`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   */
  async coachStripeCountrySpecsList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string>> {
    const response = await this.coachStripeCountrySpecsListRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async coachStripeLoginLinksCreateRaw(
    requestParameters: CoachStripeLoginLinksCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<LoginLink>> {
    if (
      requestParameters.createLoginLink === null ||
      requestParameters.createLoginLink === undefined
    ) {
      throw new runtime.RequiredError(
        "createLoginLink",
        "Required parameter requestParameters.createLoginLink was null or undefined when calling coachStripeLoginLinksCreate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/coach/stripe-login-links`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createLoginLink,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async coachStripeLoginLinksCreate(
    requestParameters: CoachStripeLoginLinksCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<LoginLink> {
    const response = await this.coachStripeLoginLinksCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async indexGetHealthRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async indexGetHealth(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<StatusResponse> {
    const response = await this.indexGetHealthRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async playerAccountCreateRaw(
    requestParameters: PlayerAccountCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CreateSessionResponse>> {
    if (
      requestParameters.createPlayerRequest === null ||
      requestParameters.createPlayerRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createPlayerRequest",
        "Required parameter requestParameters.createPlayerRequest was null or undefined when calling playerAccountCreate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/player/account`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createPlayerRequest,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerAccountCreate(
    requestParameters: PlayerAccountCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CreateSessionResponse> {
    const response = await this.playerAccountCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async playerAccountGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Player>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/player/account`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerAccountGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Player> {
    const response = await this.playerAccountGetRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async playerAccountUpdateRaw(
    requestParameters: PlayerAccountUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Player>> {
    if (
      requestParameters.updatePlayerRequest === null ||
      requestParameters.updatePlayerRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "updatePlayerRequest",
        "Required parameter requestParameters.updatePlayerRequest was null or undefined when calling playerAccountUpdate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/player/account`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.updatePlayerRequest,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerAccountUpdate(
    requestParameters: PlayerAccountUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Player> {
    const response = await this.playerAccountUpdateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async playerCoachesGetRaw(
    requestParameters: PlayerCoachesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Coach>> {
    if (
      requestParameters.slug === null ||
      requestParameters.slug === undefined
    ) {
      throw new runtime.RequiredError(
        "slug",
        "Required parameter requestParameters.slug was null or undefined when calling playerCoachesGet."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/player/coaches/{slug}`.replace(
          `{${"slug"}}`,
          encodeURIComponent(String(requestParameters.slug))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerCoachesGet(
    requestParameters: PlayerCoachesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Coach> {
    const response = await this.playerCoachesGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async playerCoachesListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Coach>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/player/coaches`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerCoachesList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Coach>> {
    const response = await this.playerCoachesListRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async playerCommentsListRaw(
    requestParameters: PlayerCommentsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Comment>>> {
    if (
      requestParameters.reviewId === null ||
      requestParameters.reviewId === undefined
    ) {
      throw new runtime.RequiredError(
        "reviewId",
        "Required parameter requestParameters.reviewId was null or undefined when calling playerCommentsList."
      )
    }

    const queryParameters: any = {}

    if (requestParameters.reviewId !== undefined) {
      queryParameters["review_id"] = requestParameters.reviewId
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/player/comments`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerCommentsList(
    requestParameters: PlayerCommentsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Comment>> {
    const response = await this.playerCommentsListRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async playerGamesCreateRaw(
    requestParameters: PlayerGamesCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    if (
      requestParameters.createGameRequest === null ||
      requestParameters.createGameRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createGameRequest",
        "Required parameter requestParameters.createGameRequest was null or undefined when calling playerGamesCreate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/player/games`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createGameRequest,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerGamesCreate(
    requestParameters: PlayerGamesCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<StatusResponse> {
    const response = await this.playerGamesCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async playerGamesListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Game>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/player/games`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerGamesList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Game>> {
    const response = await this.playerGamesListRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async playerRecordingsCreateRaw(
    requestParameters: PlayerRecordingsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Recording>> {
    if (
      requestParameters.createRecordingRequest === null ||
      requestParameters.createRecordingRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createRecordingRequest",
        "Required parameter requestParameters.createRecordingRequest was null or undefined when calling playerRecordingsCreate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/player/recordings`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createRecordingRequest,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerRecordingsCreate(
    requestParameters: PlayerRecordingsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Recording> {
    const response = await this.playerRecordingsCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async playerRecordingsGetRaw(
    requestParameters: PlayerRecordingsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Recording>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling playerRecordingsGet."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/player/recordings/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerRecordingsGet(
    requestParameters: PlayerRecordingsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Recording> {
    const response = await this.playerRecordingsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async playerRecordingsListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Recording>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/player/recordings`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerRecordingsList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Recording>> {
    const response = await this.playerRecordingsListRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async playerReviewsCreateRaw(
    requestParameters: PlayerReviewsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Review>> {
    if (
      requestParameters.createReviewRequest === null ||
      requestParameters.createReviewRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createReviewRequest",
        "Required parameter requestParameters.createReviewRequest was null or undefined when calling playerReviewsCreate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/player/reviews`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createReviewRequest,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerReviewsCreate(
    requestParameters: PlayerReviewsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Review> {
    const response = await this.playerReviewsCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async playerReviewsDeleteRaw(
    requestParameters: PlayerReviewsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling playerReviewsDelete."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/player/reviews/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerReviewsDelete(
    requestParameters: PlayerReviewsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<StatusResponse> {
    const response = await this.playerReviewsDeleteRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async playerReviewsGetRaw(
    requestParameters: PlayerReviewsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Review>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling playerReviewsGet."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/player/reviews/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerReviewsGet(
    requestParameters: PlayerReviewsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Review> {
    const response = await this.playerReviewsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async playerReviewsListRaw(
    requestParameters: PlayerReviewsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginatedResultForReview>> {
    const queryParameters: any = {}

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page
    }

    if (requestParameters.archived !== undefined) {
      queryParameters["archived"] = requestParameters.archived
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/player/reviews`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerReviewsList(
    requestParameters: PlayerReviewsListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginatedResultForReview> {
    const response = await this.playerReviewsListRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async playerReviewsUpdateRaw(
    requestParameters: PlayerReviewsUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Review>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling playerReviewsUpdate."
      )
    }

    if (
      requestParameters.playerUpdateReviewRequest === null ||
      requestParameters.playerUpdateReviewRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "playerUpdateReviewRequest",
        "Required parameter requestParameters.playerUpdateReviewRequest was null or undefined when calling playerReviewsUpdate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/player/reviews/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.playerUpdateReviewRequest,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerReviewsUpdate(
    requestParameters: PlayerReviewsUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Review> {
    const response = await this.playerReviewsUpdateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async playerStripeBillingDetailsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<BillingDetails>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/player/stripe-billing-details`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerStripeBillingDetailsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<BillingDetails> {
    const response = await this.playerStripeBillingDetailsGetRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async playerStripeBillingDetailsUpdateRaw(
    requestParameters: PlayerStripeBillingDetailsUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    if (
      requestParameters.billingDetails === null ||
      requestParameters.billingDetails === undefined
    ) {
      throw new runtime.RequiredError(
        "billingDetails",
        "Required parameter requestParameters.billingDetails was null or undefined when calling playerStripeBillingDetailsUpdate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/player/stripe-billing-details`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.billingDetails,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerStripeBillingDetailsUpdate(
    requestParameters: PlayerStripeBillingDetailsUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<StatusResponse> {
    const response = await this.playerStripeBillingDetailsUpdateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async playerStripeBillingPortalSessionsCreateRaw(
    requestParameters: PlayerStripeBillingPortalSessionsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<BillingPortalLink>> {
    if (
      requestParameters.createBillingPortalSession === null ||
      requestParameters.createBillingPortalSession === undefined
    ) {
      throw new runtime.RequiredError(
        "createBillingPortalSession",
        "Required parameter requestParameters.createBillingPortalSession was null or undefined when calling playerStripeBillingPortalSessionsCreate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/player/stripe-billing-portal-sessions`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createBillingPortalSession,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerStripeBillingPortalSessionsCreate(
    requestParameters: PlayerStripeBillingPortalSessionsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<BillingPortalLink> {
    const response = await this.playerStripeBillingPortalSessionsCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async playerStripePaymentMethodsListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<PaymentMethod>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/player/stripe-payment-methods`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async playerStripePaymentMethodsList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<PaymentMethod>> {
    const response = await this.playerStripePaymentMethodsListRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async sessionCreateRaw(
    requestParameters: SessionCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CreateSessionResponse>> {
    if (
      requestParameters.createSessionRequest === null ||
      requestParameters.createSessionRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createSessionRequest",
        "Required parameter requestParameters.createSessionRequest was null or undefined when calling sessionCreate."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/sessions`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createSessionRequest,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async sessionCreate(
    requestParameters: SessionCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CreateSessionResponse> {
    const response = await this.sessionCreateRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async sessionResetPasswordRaw(
    requestParameters: SessionResetPasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    if (
      requestParameters.resetPasswordRequest === null ||
      requestParameters.resetPasswordRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "resetPasswordRequest",
        "Required parameter requestParameters.resetPasswordRequest was null or undefined when calling sessionResetPassword."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/sessions/reset-password`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.resetPasswordRequest,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async sessionResetPassword(
    requestParameters: SessionResetPasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<StatusResponse> {
    const response = await this.sessionResetPasswordRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   */
  async sessionUpdatePasswordRaw(
    requestParameters: SessionUpdatePasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    if (
      requestParameters.auth === null ||
      requestParameters.auth === undefined
    ) {
      throw new runtime.RequiredError(
        "auth",
        "Required parameter requestParameters.auth was null or undefined when calling sessionUpdatePassword."
      )
    }

    if (
      requestParameters.updatePasswordRequest === null ||
      requestParameters.updatePasswordRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "updatePasswordRequest",
        "Required parameter requestParameters.updatePasswordRequest was null or undefined when calling sessionUpdatePassword."
      )
    }

    const queryParameters: any = {}

    if (requestParameters.auth !== undefined) {
      queryParameters["auth"] = requestParameters.auth
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/sessions/password`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.updatePasswordRequest,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async sessionUpdatePassword(
    requestParameters: SessionUpdatePasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<StatusResponse> {
    const response = await this.sessionUpdatePasswordRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }
}
