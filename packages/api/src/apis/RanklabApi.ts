/* tslint:disable */
/* eslint-disable */
/**
 * ranklab-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import type {
  Audio,
  Avatar,
  Comment,
  CreateCommentRequest,
  CreateGameRequest,
  CreatePasswordRequest,
  CreateRecordingRequest,
  CreateSessionRequest,
  CreateUserRequest,
  Game,
  GameId,
  OneTimeTokenParams,
  PaginatedResultForRecording,
  Recording,
  Session,
  StatusResponse,
  UpdateCommentRequest,
  UpdatePasswordRequest,
  UpdateUserRequest,
  User,
} from "../models"

export interface AudiosDeleteRequest {
  id: string
}

export interface AudiosGetRequest {
  id: string
}

export interface AvatarsDeleteRequest {
  id: string
}

export interface AvatarsGetRequest {
  id: string
}

export interface CommentsCreateRequest {
  createCommentRequest: CreateCommentRequest
}

export interface CommentsDeleteRequest {
  id: string
}

export interface CommentsListRequest {
  recordingId: string
}

export interface CommentsUpdateRequest {
  id: string
  updateCommentRequest: UpdateCommentRequest
}

export interface GamesCreateRequest {
  createGameRequest: CreateGameRequest
}

export interface PasswordsCreateRequest {
  createPasswordRequest: CreatePasswordRequest
}

export interface PasswordsUpdateRequest {
  auth: OneTimeTokenParams
  updatePasswordRequest: UpdatePasswordRequest
}

export interface RecordingsCreateRequest {
  createRecordingRequest: CreateRecordingRequest
}

export interface RecordingsDeleteRequest {
  id: string
}

export interface RecordingsGetRequest {
  id: string
}

export interface RecordingsListRequest {
  page?: number | null
  onlyOwn?: boolean | null
  gameId?: GameId
}

export interface SessionsCreateRequest {
  createSessionRequest: CreateSessionRequest
}

export interface UsersCreateRequest {
  createUserRequest: CreateUserRequest
}

export interface UsersUpdateRequest {
  updateUserRequest: UpdateUserRequest
}

/**
 *
 */
export class RanklabApi extends runtime.BaseAPI {
  /**
   */
  async audiosCreateRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Audio>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/audios`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async audiosCreate(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Audio> {
    const response = await this.audiosCreateRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async audiosDeleteRaw(
    requestParameters: AudiosDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling audiosDelete.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/audios/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async audiosDelete(
    requestParameters: AudiosDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StatusResponse> {
    const response = await this.audiosDeleteRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   */
  async audiosGetRaw(
    requestParameters: AudiosGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Audio>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling audiosGet.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/audios/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async audiosGet(
    requestParameters: AudiosGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Audio> {
    const response = await this.audiosGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async avatarsCreateRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Avatar>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/avatars`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async avatarsCreate(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Avatar> {
    const response = await this.avatarsCreateRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async avatarsDeleteRaw(
    requestParameters: AvatarsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling avatarsDelete.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/avatars/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async avatarsDelete(
    requestParameters: AvatarsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StatusResponse> {
    const response = await this.avatarsDeleteRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   */
  async avatarsGetRaw(
    requestParameters: AvatarsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Avatar>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling avatarsGet.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/avatars/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async avatarsGet(
    requestParameters: AvatarsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Avatar> {
    const response = await this.avatarsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async commentsCreateRaw(
    requestParameters: CommentsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Comment>> {
    if (
      requestParameters.createCommentRequest === null ||
      requestParameters.createCommentRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createCommentRequest",
        "Required parameter requestParameters.createCommentRequest was null or undefined when calling commentsCreate.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/comments`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createCommentRequest,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async commentsCreate(
    requestParameters: CommentsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Comment> {
    const response = await this.commentsCreateRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   */
  async commentsDeleteRaw(
    requestParameters: CommentsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling commentsDelete.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/comments/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async commentsDelete(
    requestParameters: CommentsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StatusResponse> {
    const response = await this.commentsDeleteRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   */
  async commentsListRaw(
    requestParameters: CommentsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Comment>>> {
    if (
      requestParameters.recordingId === null ||
      requestParameters.recordingId === undefined
    ) {
      throw new runtime.RequiredError(
        "recordingId",
        "Required parameter requestParameters.recordingId was null or undefined when calling commentsList.",
      )
    }

    const queryParameters: any = {}

    if (requestParameters.recordingId !== undefined) {
      queryParameters["recording_id"] = requestParameters.recordingId
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/comments`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async commentsList(
    requestParameters: CommentsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Comment>> {
    const response = await this.commentsListRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   */
  async commentsUpdateRaw(
    requestParameters: CommentsUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Comment>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling commentsUpdate.",
      )
    }

    if (
      requestParameters.updateCommentRequest === null ||
      requestParameters.updateCommentRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "updateCommentRequest",
        "Required parameter requestParameters.updateCommentRequest was null or undefined when calling commentsUpdate.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/comments/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.updateCommentRequest,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async commentsUpdate(
    requestParameters: CommentsUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Comment> {
    const response = await this.commentsUpdateRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   */
  async gamesCreateRaw(
    requestParameters: GamesCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    if (
      requestParameters.createGameRequest === null ||
      requestParameters.createGameRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createGameRequest",
        "Required parameter requestParameters.createGameRequest was null or undefined when calling gamesCreate.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/games`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createGameRequest,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async gamesCreate(
    requestParameters: GamesCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StatusResponse> {
    const response = await this.gamesCreateRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async gamesListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Game>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/games`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async gamesList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Game>> {
    const response = await this.gamesListRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async indexGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async indexGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StatusResponse> {
    const response = await this.indexGetRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async passwordsCreateRaw(
    requestParameters: PasswordsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    if (
      requestParameters.createPasswordRequest === null ||
      requestParameters.createPasswordRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createPasswordRequest",
        "Required parameter requestParameters.createPasswordRequest was null or undefined when calling passwordsCreate.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/passwords`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createPasswordRequest,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async passwordsCreate(
    requestParameters: PasswordsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StatusResponse> {
    const response = await this.passwordsCreateRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   */
  async passwordsUpdateRaw(
    requestParameters: PasswordsUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    if (
      requestParameters.auth === null ||
      requestParameters.auth === undefined
    ) {
      throw new runtime.RequiredError(
        "auth",
        "Required parameter requestParameters.auth was null or undefined when calling passwordsUpdate.",
      )
    }

    if (
      requestParameters.updatePasswordRequest === null ||
      requestParameters.updatePasswordRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "updatePasswordRequest",
        "Required parameter requestParameters.updatePasswordRequest was null or undefined when calling passwordsUpdate.",
      )
    }

    const queryParameters: any = {}

    if (requestParameters.auth !== undefined) {
      queryParameters["auth"] = requestParameters.auth
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/passwords`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.updatePasswordRequest,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async passwordsUpdate(
    requestParameters: PasswordsUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StatusResponse> {
    const response = await this.passwordsUpdateRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   */
  async recordingsCreateRaw(
    requestParameters: RecordingsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Recording>> {
    if (
      requestParameters.createRecordingRequest === null ||
      requestParameters.createRecordingRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createRecordingRequest",
        "Required parameter requestParameters.createRecordingRequest was null or undefined when calling recordingsCreate.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/recordings`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createRecordingRequest,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async recordingsCreate(
    requestParameters: RecordingsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Recording> {
    const response = await this.recordingsCreateRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   */
  async recordingsDeleteRaw(
    requestParameters: RecordingsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StatusResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling recordingsDelete.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/recordings/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async recordingsDelete(
    requestParameters: RecordingsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StatusResponse> {
    const response = await this.recordingsDeleteRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   */
  async recordingsGetRaw(
    requestParameters: RecordingsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Recording>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling recordingsGet.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/recordings/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async recordingsGet(
    requestParameters: RecordingsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Recording> {
    const response = await this.recordingsGetRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   */
  async recordingsListRaw(
    requestParameters: RecordingsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PaginatedResultForRecording>> {
    const queryParameters: any = {}

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page
    }

    if (requestParameters.onlyOwn !== undefined) {
      queryParameters["only_own"] = requestParameters.onlyOwn
    }

    if (requestParameters.gameId !== undefined) {
      queryParameters["game_id"] = requestParameters.gameId
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/recordings`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async recordingsList(
    requestParameters: RecordingsListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PaginatedResultForRecording> {
    const response = await this.recordingsListRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   */
  async sessionsCreateRaw(
    requestParameters: SessionsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Session>> {
    if (
      requestParameters.createSessionRequest === null ||
      requestParameters.createSessionRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createSessionRequest",
        "Required parameter requestParameters.createSessionRequest was null or undefined when calling sessionsCreate.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/sessions`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createSessionRequest,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async sessionsCreate(
    requestParameters: SessionsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Session> {
    const response = await this.sessionsCreateRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   */
  async usersCreateRaw(
    requestParameters: UsersCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Session>> {
    if (
      requestParameters.createUserRequest === null ||
      requestParameters.createUserRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createUserRequest",
        "Required parameter requestParameters.createUserRequest was null or undefined when calling usersCreate.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/users`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createUserRequest,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async usersCreate(
    requestParameters: UsersCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Session> {
    const response = await this.usersCreateRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async usersGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/users`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async usersGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User> {
    const response = await this.usersGetRaw(initOverrides)
    return await response.value()
  }

  /**
   */
  async usersUpdateRaw(
    requestParameters: UsersUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (
      requestParameters.updateUserRequest === null ||
      requestParameters.updateUserRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "updateUserRequest",
        "Required parameter requestParameters.updateUserRequest was null or undefined when calling usersUpdate.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/users`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.updateUserRequest,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response)
  }

  /**
   */
  async usersUpdate(
    requestParameters: UsersUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User> {
    const response = await this.usersUpdateRaw(requestParameters, initOverrides)
    return await response.value()
  }
}
