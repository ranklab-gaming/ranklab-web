/**
 * ranklab-api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface Coach
 */
export interface Coach {
    /**
     *
     * @type {string}
     * @memberof Coach
     */
    bio: string;
    /**
     *
     * @type {string}
     * @memberof Coach
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof Coach
     */
    game: string;
    /**
     *
     * @type {string}
     * @memberof Coach
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Coach
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Coach
     */
    userId: string;
}
/**
 *
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     *
     * @type {string}
     * @memberof Comment
     */
    body: string;
    /**
     *
     * @type {string}
     * @memberof Comment
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Comment
     */
    reviewId: string;
    /**
     *
     * @type {string}
     * @memberof Comment
     */
    userId: string;
    /**
     *
     * @type {number}
     * @memberof Comment
     */
    videoTimestamp: number;
}
/**
 *
 * @export
 * @interface CreateCoachRequest
 */
export interface CreateCoachRequest {
    /**
     *
     * @type {string}
     * @memberof CreateCoachRequest
     */
    bio: string;
    /**
     *
     * @type {string}
     * @memberof CreateCoachRequest
     */
    email: string;
    /**
     *
     * @type {Game}
     * @memberof CreateCoachRequest
     */
    game: Game;
    /**
     *
     * @type {string}
     * @memberof CreateCoachRequest
     */
    name: string;
}
/**
 *
 * @export
 * @interface CreateCommentRequest
 */
export interface CreateCommentRequest {
    /**
     *
     * @type {string}
     * @memberof CreateCommentRequest
     */
    body: string;
    /**
     *
     * @type {string}
     * @memberof CreateCommentRequest
     */
    reviewId: string;
    /**
     *
     * @type {number}
     * @memberof CreateCommentRequest
     */
    videoTimestamp: number;
}
/**
 *
 * @export
 * @interface CreateReviewRequest
 */
export interface CreateReviewRequest {
    /**
     *
     * @type {Game}
     * @memberof CreateReviewRequest
     */
    game: Game;
    /**
     *
     * @type {string}
     * @memberof CreateReviewRequest
     */
    recordingId: string;
    /**
     *
     * @type {string}
     * @memberof CreateReviewRequest
     */
    title: string;
}
/**
 *
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     *
     * @type {string}
     * @memberof CreateUserRequest
     */
    auth0Id: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Game {
    Overwatch,
    Chess
}
/**
 *
 * @export
 * @interface Health
 */
export interface Health {
    /**
     *
     * @type {string}
     * @memberof Health
     */
    status: string;
}
/**
 *
 * @export
 * @interface Recording
 */
export interface Recording {
    /**
     *
     * @type {string}
     * @memberof Recording
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Recording
     */
    uploadUrl: string;
}
/**
 *
 * @export
 * @interface Review
 */
export interface Review {
    /**
     *
     * @type {string}
     * @memberof Review
     */
    coachId?: string;
    /**
     *
     * @type {string}
     * @memberof Review
     */
    game: string;
    /**
     *
     * @type {string}
     * @memberof Review
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Review
     */
    title: string;
    /**
     *
     * @type {string}
     * @memberof Review
     */
    userId: string;
    /**
     *
     * @type {string}
     * @memberof Review
     */
    videoUrl: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    auth0Id: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    id: string;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export declare const DefaultApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHealth(options?: any): FetchArgs;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHealth(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Health>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHealth(options?: any): Promise<Health>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getHealth(options?: any): Promise<Health>;
}
/**
 * RanklabApi - fetch parameter creator
 * @export
 */
export declare const RanklabApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateCoachRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coachesCreate(body: CreateCoachRequest, options?: any): FetchArgs;
    /**
     *
     * @param {CreateCommentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsCreate(body: CreateCommentRequest, options?: any): FetchArgs;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recordingsCreate(options?: any): FetchArgs;
    /**
     *
     * @param {CreateReviewRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reviewsCreate(body: CreateReviewRequest, options?: any): FetchArgs;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reviewsGet(id: string, options?: any): FetchArgs;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reviewsList(options?: any): FetchArgs;
    /**
     *
     * @param {CreateUserRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate(body: CreateUserRequest, options?: any): FetchArgs;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGetCurrent(options?: any): FetchArgs;
};
/**
 * RanklabApi - functional programming interface
 * @export
 */
export declare const RanklabApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateCoachRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coachesCreate(body: CreateCoachRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Coach>;
    /**
     *
     * @param {CreateCommentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsCreate(body: CreateCommentRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Comment>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recordingsCreate(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Recording>;
    /**
     *
     * @param {CreateReviewRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reviewsCreate(body: CreateReviewRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Review>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reviewsGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Review>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reviewsList(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Review>>;
    /**
     *
     * @param {CreateUserRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate(body: CreateUserRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGetCurrent(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User>;
};
/**
 * RanklabApi - factory interface
 * @export
 */
export declare const RanklabApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @param {CreateCoachRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coachesCreate(body: CreateCoachRequest, options?: any): Promise<Coach>;
    /**
     *
     * @param {CreateCommentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsCreate(body: CreateCommentRequest, options?: any): Promise<Comment>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recordingsCreate(options?: any): Promise<Recording>;
    /**
     *
     * @param {CreateReviewRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reviewsCreate(body: CreateReviewRequest, options?: any): Promise<Review>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reviewsGet(id: string, options?: any): Promise<Review>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reviewsList(options?: any): Promise<Review[]>;
    /**
     *
     * @param {CreateUserRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate(body: CreateUserRequest, options?: any): Promise<User>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGetCurrent(options?: any): Promise<User>;
};
/**
 * RanklabApi - object-oriented interface
 * @export
 * @class RanklabApi
 * @extends {BaseAPI}
 */
export declare class RanklabApi extends BaseAPI {
    /**
     *
     * @param {CreateCoachRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RanklabApi
     */
    coachesCreate(body: CreateCoachRequest, options?: any): Promise<Coach>;
    /**
     *
     * @param {CreateCommentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RanklabApi
     */
    commentsCreate(body: CreateCommentRequest, options?: any): Promise<Comment>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RanklabApi
     */
    recordingsCreate(options?: any): Promise<Recording>;
    /**
     *
     * @param {CreateReviewRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RanklabApi
     */
    reviewsCreate(body: CreateReviewRequest, options?: any): Promise<Review>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RanklabApi
     */
    reviewsGet(id: string, options?: any): Promise<Review>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RanklabApi
     */
    reviewsList(options?: any): Promise<Review[]>;
    /**
     *
     * @param {CreateUserRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RanklabApi
     */
    usersCreate(body: CreateUserRequest, options?: any): Promise<User>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RanklabApi
     */
    usersGetCurrent(options?: any): Promise<User>;
}
