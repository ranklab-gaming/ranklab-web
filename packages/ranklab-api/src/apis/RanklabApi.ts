/* tslint:disable */
/* eslint-disable */
/**
 * ranklab-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountLink,
  AuthQuery,
  BillingPortalLink,
  Coach,
  CoachUpdateAccountRequest,
  CoachUpdateReviewRequest,
  Comment,
  CreateAccountLinkMutation,
  CreateBillingPortalSessionMutation,
  CreateCoachRequest,
  CreateCommentRequest,
  CreateLoginLinkMutation,
  CreatePlayerRequest,
  CreateRecordingRequest,
  CreateReviewMutation,
  CreateSessionRequest,
  CreateSessionResponse,
  Game,
  LoginLink,
  PaginatedResultForReview,
  PaymentMethod,
  Player,
  PlayerUpdateAccountRequest,
  PlayerUpdateReviewRequest,
  Recording,
  ResetPasswordRequest,
  Review,
  StatusResponse,
  UpdateCommentRequest,
  UpdatePasswordRequest,
} from '../models';

export interface CoachAccountCreateRequest {
    createCoachRequest: CreateCoachRequest;
}

export interface CoachAccountUpdateRequest {
    coachUpdateAccountRequest: CoachUpdateAccountRequest;
}

export interface CoachCommentsCreateRequest {
    createCommentRequest: CreateCommentRequest;
}

export interface CoachCommentsListRequest {
    reviewId: string;
}

export interface CoachCommentsUpdateRequest {
    id: string;
    updateCommentRequest: UpdateCommentRequest;
}

export interface CoachRecordingsGetRequest {
    id: string;
}

export interface CoachReviewsGetRequest {
    id: string;
}

export interface CoachReviewsListRequest {
    page?: number | null;
    archived?: boolean | null;
}

export interface CoachReviewsUpdateRequest {
    id: string;
    coachUpdateReviewRequest: CoachUpdateReviewRequest;
}

export interface CoachStripeAccountLinksCreateRequest {
    createAccountLinkMutation: CreateAccountLinkMutation;
}

export interface CoachStripeLoginLinksCreateRequest {
    createLoginLinkMutation: CreateLoginLinkMutation;
}

export interface PlayerAccountCreateRequest {
    createPlayerRequest: CreatePlayerRequest;
}

export interface PlayerAccountUpdateRequest {
    playerUpdateAccountRequest: PlayerUpdateAccountRequest;
}

export interface PlayerCommentsListRequest {
    reviewId: string;
}

export interface PlayerRecordingsCreateRequest {
    createRecordingRequest: CreateRecordingRequest;
}

export interface PlayerRecordingsGetRequest {
    id: string;
}

export interface PlayerReviewsCreateRequest {
    createReviewMutation: CreateReviewMutation;
}

export interface PlayerReviewsGetRequest {
    id: string;
}

export interface PlayerReviewsListRequest {
    page?: number | null;
    archived?: boolean | null;
}

export interface PlayerReviewsUpdateRequest {
    id: string;
    playerUpdateReviewRequest: PlayerUpdateReviewRequest;
}

export interface PlayerStripeBillingPortalSessionsCreateRequest {
    createBillingPortalSessionMutation: CreateBillingPortalSessionMutation;
}

export interface SessionCreateRequest {
    clientSecret: string;
    createSessionRequest: CreateSessionRequest;
}

export interface SessionResetPasswordRequest {
    resetPasswordRequest: ResetPasswordRequest;
}

export interface SessionUpdatePasswordRequest {
    auth: AuthQuery;
    updatePasswordRequest: UpdatePasswordRequest;
}

/**
 * 
 */
export class RanklabApi extends runtime.BaseAPI {

    /**
     */
    async coachAccountCreateRaw(requestParameters: CoachAccountCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Coach>> {
        if (requestParameters.createCoachRequest === null || requestParameters.createCoachRequest === undefined) {
            throw new runtime.RequiredError('createCoachRequest','Required parameter requestParameters.createCoachRequest was null or undefined when calling coachAccountCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coach/account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createCoachRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async coachAccountCreate(requestParameters: CoachAccountCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Coach> {
        const response = await this.coachAccountCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async coachAccountGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Coach>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coach/account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async coachAccountGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Coach> {
        const response = await this.coachAccountGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async coachAccountGetCountriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coach/countries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async coachAccountGetCountries(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.coachAccountGetCountriesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async coachAccountUpdateRaw(requestParameters: CoachAccountUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Coach>> {
        if (requestParameters.coachUpdateAccountRequest === null || requestParameters.coachUpdateAccountRequest === undefined) {
            throw new runtime.RequiredError('coachUpdateAccountRequest','Required parameter requestParameters.coachUpdateAccountRequest was null or undefined when calling coachAccountUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coach/account`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.coachUpdateAccountRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async coachAccountUpdate(requestParameters: CoachAccountUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Coach> {
        const response = await this.coachAccountUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async coachCommentsCreateRaw(requestParameters: CoachCommentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Comment>> {
        if (requestParameters.createCommentRequest === null || requestParameters.createCommentRequest === undefined) {
            throw new runtime.RequiredError('createCommentRequest','Required parameter requestParameters.createCommentRequest was null or undefined when calling coachCommentsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coach/comments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createCommentRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async coachCommentsCreate(requestParameters: CoachCommentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Comment> {
        const response = await this.coachCommentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async coachCommentsListRaw(requestParameters: CoachCommentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Comment>>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling coachCommentsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.reviewId !== undefined) {
            queryParameters['review_id'] = requestParameters.reviewId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coach/comments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async coachCommentsList(requestParameters: CoachCommentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Comment>> {
        const response = await this.coachCommentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async coachCommentsUpdateRaw(requestParameters: CoachCommentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Comment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling coachCommentsUpdate.');
        }

        if (requestParameters.updateCommentRequest === null || requestParameters.updateCommentRequest === undefined) {
            throw new runtime.RequiredError('updateCommentRequest','Required parameter requestParameters.updateCommentRequest was null or undefined when calling coachCommentsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coach/comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateCommentRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async coachCommentsUpdate(requestParameters: CoachCommentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Comment> {
        const response = await this.coachCommentsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async coachRecordingsGetRaw(requestParameters: CoachRecordingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Recording>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling coachRecordingsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coach/recordings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async coachRecordingsGet(requestParameters: CoachRecordingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Recording> {
        const response = await this.coachRecordingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async coachReviewsGetRaw(requestParameters: CoachReviewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling coachReviewsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coach/reviews/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async coachReviewsGet(requestParameters: CoachReviewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Review> {
        const response = await this.coachReviewsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async coachReviewsListRaw(requestParameters: CoachReviewsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResultForReview>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.archived !== undefined) {
            queryParameters['archived'] = requestParameters.archived;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coach/reviews`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async coachReviewsList(requestParameters: CoachReviewsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResultForReview> {
        const response = await this.coachReviewsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async coachReviewsUpdateRaw(requestParameters: CoachReviewsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling coachReviewsUpdate.');
        }

        if (requestParameters.coachUpdateReviewRequest === null || requestParameters.coachUpdateReviewRequest === undefined) {
            throw new runtime.RequiredError('coachUpdateReviewRequest','Required parameter requestParameters.coachUpdateReviewRequest was null or undefined when calling coachReviewsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coach/reviews/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.coachUpdateReviewRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async coachReviewsUpdate(requestParameters: CoachReviewsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Review> {
        const response = await this.coachReviewsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async coachStripeAccountLinksCreateRaw(requestParameters: CoachStripeAccountLinksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountLink>> {
        if (requestParameters.createAccountLinkMutation === null || requestParameters.createAccountLinkMutation === undefined) {
            throw new runtime.RequiredError('createAccountLinkMutation','Required parameter requestParameters.createAccountLinkMutation was null or undefined when calling coachStripeAccountLinksCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coach/stripe-account-links`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createAccountLinkMutation,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async coachStripeAccountLinksCreate(requestParameters: CoachStripeAccountLinksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountLink> {
        const response = await this.coachStripeAccountLinksCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async coachStripeLoginLinksCreateRaw(requestParameters: CoachStripeLoginLinksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginLink>> {
        if (requestParameters.createLoginLinkMutation === null || requestParameters.createLoginLinkMutation === undefined) {
            throw new runtime.RequiredError('createLoginLinkMutation','Required parameter requestParameters.createLoginLinkMutation was null or undefined when calling coachStripeLoginLinksCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coach/stripe-login-links`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createLoginLinkMutation,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async coachStripeLoginLinksCreate(requestParameters: CoachStripeLoginLinksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginLink> {
        const response = await this.coachStripeLoginLinksCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Game>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/games`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async gameList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Game>> {
        const response = await this.gameListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async indexGetHealthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async indexGetHealth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusResponse> {
        const response = await this.indexGetHealthRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async playerAccountCreateRaw(requestParameters: PlayerAccountCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters.createPlayerRequest === null || requestParameters.createPlayerRequest === undefined) {
            throw new runtime.RequiredError('createPlayerRequest','Required parameter requestParameters.createPlayerRequest was null or undefined when calling playerAccountCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/player/account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createPlayerRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async playerAccountCreate(requestParameters: PlayerAccountCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.playerAccountCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async playerAccountGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/player/account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async playerAccountGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.playerAccountGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async playerAccountUpdateRaw(requestParameters: PlayerAccountUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters.playerUpdateAccountRequest === null || requestParameters.playerUpdateAccountRequest === undefined) {
            throw new runtime.RequiredError('playerUpdateAccountRequest','Required parameter requestParameters.playerUpdateAccountRequest was null or undefined when calling playerAccountUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/player/account`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.playerUpdateAccountRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async playerAccountUpdate(requestParameters: PlayerAccountUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.playerAccountUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async playerCommentsListRaw(requestParameters: PlayerCommentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Comment>>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling playerCommentsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.reviewId !== undefined) {
            queryParameters['review_id'] = requestParameters.reviewId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/player/comments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async playerCommentsList(requestParameters: PlayerCommentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Comment>> {
        const response = await this.playerCommentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async playerRecordingsCreateRaw(requestParameters: PlayerRecordingsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Recording>> {
        if (requestParameters.createRecordingRequest === null || requestParameters.createRecordingRequest === undefined) {
            throw new runtime.RequiredError('createRecordingRequest','Required parameter requestParameters.createRecordingRequest was null or undefined when calling playerRecordingsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/player/recordings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createRecordingRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async playerRecordingsCreate(requestParameters: PlayerRecordingsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Recording> {
        const response = await this.playerRecordingsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async playerRecordingsGetRaw(requestParameters: PlayerRecordingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Recording>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playerRecordingsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/player/recordings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async playerRecordingsGet(requestParameters: PlayerRecordingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Recording> {
        const response = await this.playerRecordingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async playerRecordingsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Recording>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/player/recordings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async playerRecordingsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Recording>> {
        const response = await this.playerRecordingsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async playerReviewsCreateRaw(requestParameters: PlayerReviewsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters.createReviewMutation === null || requestParameters.createReviewMutation === undefined) {
            throw new runtime.RequiredError('createReviewMutation','Required parameter requestParameters.createReviewMutation was null or undefined when calling playerReviewsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/player/reviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createReviewMutation,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async playerReviewsCreate(requestParameters: PlayerReviewsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Review> {
        const response = await this.playerReviewsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async playerReviewsGetRaw(requestParameters: PlayerReviewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playerReviewsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/player/reviews/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async playerReviewsGet(requestParameters: PlayerReviewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Review> {
        const response = await this.playerReviewsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async playerReviewsListRaw(requestParameters: PlayerReviewsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResultForReview>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.archived !== undefined) {
            queryParameters['archived'] = requestParameters.archived;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/player/reviews`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async playerReviewsList(requestParameters: PlayerReviewsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResultForReview> {
        const response = await this.playerReviewsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async playerReviewsUpdateRaw(requestParameters: PlayerReviewsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playerReviewsUpdate.');
        }

        if (requestParameters.playerUpdateReviewRequest === null || requestParameters.playerUpdateReviewRequest === undefined) {
            throw new runtime.RequiredError('playerUpdateReviewRequest','Required parameter requestParameters.playerUpdateReviewRequest was null or undefined when calling playerReviewsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/player/reviews/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.playerUpdateReviewRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async playerReviewsUpdate(requestParameters: PlayerReviewsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Review> {
        const response = await this.playerReviewsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async playerStripeBillingPortalSessionsCreateRaw(requestParameters: PlayerStripeBillingPortalSessionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingPortalLink>> {
        if (requestParameters.createBillingPortalSessionMutation === null || requestParameters.createBillingPortalSessionMutation === undefined) {
            throw new runtime.RequiredError('createBillingPortalSessionMutation','Required parameter requestParameters.createBillingPortalSessionMutation was null or undefined when calling playerStripeBillingPortalSessionsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/player/stripe-billing-portal-sessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createBillingPortalSessionMutation,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async playerStripeBillingPortalSessionsCreate(requestParameters: PlayerStripeBillingPortalSessionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingPortalLink> {
        const response = await this.playerStripeBillingPortalSessionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async playerStripePaymentMethodsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PaymentMethod>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/player/stripe-payment-methods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async playerStripePaymentMethodsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PaymentMethod>> {
        const response = await this.playerStripePaymentMethodsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async sessionCreateRaw(requestParameters: SessionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSessionResponse>> {
        if (requestParameters.clientSecret === null || requestParameters.clientSecret === undefined) {
            throw new runtime.RequiredError('clientSecret','Required parameter requestParameters.clientSecret was null or undefined when calling sessionCreate.');
        }

        if (requestParameters.createSessionRequest === null || requestParameters.createSessionRequest === undefined) {
            throw new runtime.RequiredError('createSessionRequest','Required parameter requestParameters.createSessionRequest was null or undefined when calling sessionCreate.');
        }

        const queryParameters: any = {};

        if (requestParameters.clientSecret !== undefined) {
            queryParameters['client_secret'] = requestParameters.clientSecret;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createSessionRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async sessionCreate(requestParameters: SessionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSessionResponse> {
        const response = await this.sessionCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async sessionResetPasswordRaw(requestParameters: SessionResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusResponse>> {
        if (requestParameters.resetPasswordRequest === null || requestParameters.resetPasswordRequest === undefined) {
            throw new runtime.RequiredError('resetPasswordRequest','Required parameter requestParameters.resetPasswordRequest was null or undefined when calling sessionResetPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sessions/reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.resetPasswordRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async sessionResetPassword(requestParameters: SessionResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusResponse> {
        const response = await this.sessionResetPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async sessionUpdatePasswordRaw(requestParameters: SessionUpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusResponse>> {
        if (requestParameters.auth === null || requestParameters.auth === undefined) {
            throw new runtime.RequiredError('auth','Required parameter requestParameters.auth was null or undefined when calling sessionUpdatePassword.');
        }

        if (requestParameters.updatePasswordRequest === null || requestParameters.updatePasswordRequest === undefined) {
            throw new runtime.RequiredError('updatePasswordRequest','Required parameter requestParameters.updatePasswordRequest was null or undefined when calling sessionUpdatePassword.');
        }

        const queryParameters: any = {};

        if (requestParameters.auth !== undefined) {
            queryParameters['auth'] = requestParameters.auth;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sessions/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updatePasswordRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async sessionUpdatePassword(requestParameters: SessionUpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusResponse> {
        const response = await this.sessionUpdatePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
