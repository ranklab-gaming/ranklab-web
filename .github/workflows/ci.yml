name: Test and deploy
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - "*"
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app_test
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: "https://npm.pkg.github.com"
          scope: "@ranklab-gaming"
          cache: pnpm
      - name: Get pnpm store path
        id: pnpm-cache
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.PNPM_STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Get Playwright Version
        id: get-playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(pnpm ls -r @playwright/test | grep @playwright | sed 's/.*@//')
          PLAYWRIGHT_VERSION_SHA=$(echo -n $PLAYWRIGHT_VERSION | shasum -a 256 | cut -c-64)
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION_SHA" >> $GITHUB_OUTPUT
      - name: Cache Playwright browsers
        id: cache-playwright-browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.get-playwright-version.outputs.PLAYWRIGHT_VERSION }}
      - name: Install Playwright browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: pnpm -r -F @ranklab/web exec playwright install --with-deps chrome
      - name: Setup hostnames
        run: echo "127.0.0.1 postgres dynamodb ranklab-test ranklab-api" | sudo tee -a /etc/hosts
      - name: Generate instance ID
        id: generate-instance-id
        run: echo "RANKLAB_INSTANCE_ID=$(openssl rand -hex 16)" >> $GITHUB_OUTPUT
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: $
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build ranklab-test image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: ranklab-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_ASSETS_CDN_URL=${{ secrets.TEST_NEXT_PUBLIC_ASSETS_CDN_URL }}
            NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.TEST_NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
            NEXT_PUBLIC_UPLOADS_CDN_URL=${{ secrets.TEST_NEXT_PUBLIC_UPLOADS_CDN_URL }}
            SENTRY_AUTH_TOKEN=${{ secrets.TEST_SENTRY_AUTH_TOKEN }}
      - name: Start containers
        env:
          RANKLAB_AWS_ACCESS_KEY_ID: ${{ secrets.RANKLAB_AWS_ACCESS_KEY_ID }}
          RANKLAB_AWS_SECRET_KEY: ${{ secrets.RANKLAB_AWS_SECRET_KEY }}
          RANKLAB_S3_BUCKET_QUEUE: ${{ secrets.RANKLAB_S3_BUCKET_QUEUE }}
          RANKLAB_S3_BUCKET: ${{ secrets.RANKLAB_S3_BUCKET }}
          RANKLAB_STRIPE_CONNECT_WEBHOOKS_QUEUE: ${{ secrets.RANKLAB_STRIPE_CONNECT_WEBHOOKS_QUEUE }}
          RANKLAB_STRIPE_CONNECT_WEBHOOKS_SECRET: ${{ secrets.RANKLAB_STRIPE_CONNECT_WEBHOOKS_SECRET }}
          RANKLAB_STRIPE_DIRECT_WEBHOOKS_QUEUE: ${{ secrets.RANKLAB_STRIPE_DIRECT_WEBHOOKS_QUEUE }}
          RANKLAB_STRIPE_DIRECT_WEBHOOKS_SECRET: ${{ secrets.RANKLAB_STRIPE_DIRECT_WEBHOOKS_SECRET }}
          RANKLAB_STRIPE_SECRET: ${{ secrets.RANKLAB_STRIPE_SECRET }}
          RANKLAB_INSTANCE_ID: ${{ steps.generate-instance-id.outputs.RANKLAB_INSTANCE_ID }}
        run: docker compose -f .github/docker-compose.yml up -d
      - name: Setup DynamoDB
        run: NODE_ENV=test ./bin/setup-dynamodb
      - name: Run tests
        run: DEBUG=pw:api pnpm run test
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: apps/web/playwright-report
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: apps/web/test-results
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    env:
      app-name: ${{ secrets.ECR_REPOSITORY_NAME }}
      container-name: ${{ secrets.ECS_CONTAINER_NAME }}
      cluster-name: ${{ secrets.ECS_CLUSTER_NAME }}
      service-name: ${{ secrets.ECS_SERVICE_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: $
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push to ECR and GCR
        id: docker-build
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: |
            NODE_ENV=production
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            NEXT_PUBLIC_ASSETS_CDN_URL=${{ secrets.NEXT_PUBLIC_ASSETS_CDN_URL }}
            NEXT_PUBLIC_UPLOADS_CDN_URL=${{ secrets.NEXT_PUBLIC_UPLOADS_CDN_URL }}
            NEXT_PUBLIC_SENTRY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
            NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
            NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}
            NEXT_PUBLIC_INTERCOM_APP_ID=${{ secrets.NEXT_PUBLIC_INTERCOM_APP_ID }}
            NEXT_PUBLIC_MIXPANEL_PROJECT_TOKEN=${{ secrets.NEXT_PUBLIC_MIXPANEL_PROJECT_TOKEN }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.ecr-login.outputs.registry }}/${{ env.app-name }}:${{ github.sha }}
            ${{ steps.ecr-login.outputs.registry }}/${{ env.app-name }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:latest
      - name: Download latest ECS task definition
        id: download-task
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION_FAMILY }} --query 'taskDefinition' --output json > latest-task-definition.json
          echo "::set-output name=revision::$(($(cat latest-task-definition.json | jq .revision) - 1))"
      - name: Render Amazon ECS task definition from template
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: render-task-definition
        with:
          task-definition: task-definition.json
          container-name: ${{ env.container-name }}
          image: ${{ steps.ecr-login.outputs.registry }}/${{ env.app-name }}:${{ github.sha }}
      - name: Deploy ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: ${{ env.service-name }}
          cluster: ${{ env.cluster-name }}
          wait-for-service-stability: true
      - name: De-register (latest-1) revision
        if: ${{ steps.download-task.outputs.revision > 0 }}
        run: |
          aws ecs deregister-task-definition \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}:${{ steps.download-task.outputs.revision }}
