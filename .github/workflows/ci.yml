name: Test and Deploy
on: [push]
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      TEST_STRIPE_ACCOUNT_ID: ${{ secrets.TEST_STRIPE_ACCOUNT_ID }}
      TEST_STRIPE_CUSTOMER_ID: ${{ secrets.TEST_STRIPE_CUSTOMER_ID }}
      NEXT_PUBLIC_ASSETS_CDN_URL: ${{ secrets.TEST_NEXT_PUBLIC_ASSETS_CDN_URL }}
      NEXT_PUBLIC_UPLOADS_CDN_URL: ${{ secrets.TEST_NEXT_PUBLIC_UPLOADS_CDN_URL }}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.TEST_NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
    timeout-minutes: 10
    services:
      redis:
        image: redis:latest
        ports:
          - "6379:6379"
        volumes:
          - redis:/data
      postgres:
        image: postgres:15.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app_test
        ports:
          - "5432:5432"
      ranklab-api:
        env:
          ROCKET_PROFILE: test
          ROCKET_ADDRESS: 0.0.0.0
          RANKLAB_S3_BUCKET: ${{ secrets.RANKLAB_S3_BUCKET }}
          RANKLAB_AWS_ACCESS_KEY_ID: ${{ secrets.RANKLAB_AWS_ACCESS_KEY_ID }}
          RANKLAB_AWS_SECRET_KEY: ${{ secrets.RANKLAB_AWS_SECRET_KEY }}
          RANKLAB_SENTRY_DSN: ${{ secrets.RANKLAB_SENTRY_DSN }}
          RANKLAB_S3_BUCKET_QUEUE: ${{ secrets.RANKLAB_S3_BUCKET_QUEUE }}
          RANKLAB_STRIPE_SECRET: ${{ secrets.RANKLAB_STRIPE_SECRET }}
          RANKLAB_STRIPE_DIRECT_WEBHOOKS_QUEUE: ${{ secrets.RANKLAB_STRIPE_DIRECT_WEBHOOKS_QUEUE }}
          RANKLAB_STRIPE_DIRECT_WEBHOOKS_SECRET: ${{ secrets.RANKLAB_STRIPE_DIRECT_WEBHOOKS_SECRET }}
          RANKLAB_STRIPE_CONNECT_WEBHOOKS_QUEUE: ${{ secrets.RANKLAB_STRIPE_CONNECT_WEBHOOKS_QUEUE }}
          RANKLAB_STRIPE_CONNECT_WEBHOOKS_SECRET: ${{ secrets.RANKLAB_STRIPE_CONNECT_WEBHOOKS_SECRET }}
        image: ghcr.io/ranklab-gaming/ranklab-api:latest
        credentials:
          username: $
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - "8000:8000"
        options: >-
          --add-host=ranklab-test:host-gateway
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: "https://npm.pkg.github.com"
          scope: "@ranklab-gaming"
          cache: pnpm
      - name: Add hosts
        run: echo "127.0.0.1 ranklab-test ranklab-api postgres" | sudo tee -a /etc/hosts
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build
        run: pnpm run build
      - name: Output container logs
        if: ${{ failure() }}
        run: cat /containers/**/*.log
  deploy:
    runs-on: ubuntu-latest
    env:
      app-name: ${{ secrets.ECR_REPOSITORY_NAME }}
      container-name: ${{ secrets.ECS_CONTAINER_NAME }}
      cluster-name: ${{ secrets.ECS_CLUSTER_NAME }}
      service-name: ${{ secrets.ECS_SERVICE_NAME }}
    if: github.ref == 'refs/heads/master'
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: $
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push to ECR and GCR
        id: docker-build
        uses: docker/build-push-action@v4
        with:
          build-args: |
            NODE_ENV=production
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            NEXT_PUBLIC_ASSETS_CDN_URL=${{ secrets.NEXT_PUBLIC_ASSETS_CDN_URL }}
            NEXT_PUBLIC_UPLOADS_CDN_URL=${{ secrets.NEXT_PUBLIC_PLOADS_CDN_URL }}
            NEXT_PUBLIC_SENTRY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
            NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.ecr-login.outputs.registry }}/${{ env.app-name }}:${{ github.sha }}
            ${{ steps.ecr-login.outputs.registry }}/${{ env.app-name }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:latest
      - name: Download latest ECS task definition
        id: download-task
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION_FAMILY }} --query 'taskDefinition' --output json > latest-task-definition.json
          echo "::set-output name=revision::$(($(cat latest-task-definition.json | jq .revision) - 1))"
      - name: Render Amazon ECS task definition from template
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: render-task-definition
        with:
          task-definition: task-definition.json
          container-name: ${{ env.container-name }}
          image: ${{ steps.ecr-login.outputs.registry }}/${{ env.app-name }}:${{ github.sha }}
      - name: Deploy ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: ${{ env.service-name }}
          cluster: ${{ env.cluster-name }}
          wait-for-service-stability: true
      - name: De-register (latest-1) revision
        if: ${{ steps.download-task.outputs.revision > 0 }}
        run: |
          aws ecs deregister-task-definition \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}:${{ steps.download-task.outputs.revision }}
